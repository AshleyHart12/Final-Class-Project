{"ast":null,"code":"var _jsxFileName = \"/Users/ashinator/code/Final-Class-Project/client/src/components/pages/GameApp/GameApp.js\";\nimport React, { Component } from 'react';\nimport Grid from './components/Grid/Grid';\nimport ColorPickers from './components/ColorPickers/ColorPickers';\nimport { Graph } from './Graph';\nimport './index.css';\nconst SIZE = 12;\nconst COLORS = ['blue', 'red', 'green', 'yellow', 'orange'];\n\nclass BoardGame extends Component {\n  constructor(props) {\n    super(props);\n    this.incrementCount = this.incrementCount.bind(this);\n    this.sliderInput = this.sliderInput.bind(this);\n    this.restart = this.restart.bind(this);\n    this.colorFill = this.colorFill.bind(this);\n    this.state = {\n      size: SIZE,\n      graph: new Graph(SIZE),\n      colors: COLORS,\n      count: 0\n    };\n  }\n\n  incrementCount() {\n    this.setState({\n      count: this.state.count + 1\n    });\n  }\n\n  restart() {\n    this.setState({\n      graph: new Graph(this.state.size),\n      count: 0\n    });\n  }\n\n  sliderInput(value) {\n    this.setState({\n      size: value,\n      graph: this.newGrid(value, this.state.colors),\n      count: 0\n    });\n  }\n\n  colorFill(color) {\n    this.state.graph.colorFill(color);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Color Flood\"), React.createElement(\"div\", {\n      className: \"newgame\",\n      onClick: e => this.restart(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"New Game\"), React.createElement(\"div\", {\n      className: \"count\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Changes \", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.state.count))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(ColorPickers, {\n      colors: this.state.colors,\n      clickHandler: this.colorFill,\n      incrementCount: this.incrementCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Starting in the top left corner click on the circles to fill the grid! Try to get as few changes as possible!\"), React.createElement(Grid, {\n      grid: this.state.graph,\n      colors: this.state.colors,\n      size: this.state.size,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BoardGame;","map":{"version":3,"sources":["/Users/ashinator/code/Final-Class-Project/client/src/components/pages/GameApp/GameApp.js"],"names":["React","Component","Grid","ColorPickers","Graph","SIZE","COLORS","BoardGame","constructor","props","incrementCount","bind","sliderInput","restart","colorFill","state","size","graph","colors","count","setState","value","newGrid","color","render","e"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Grid from './components/Grid/Grid';\nimport ColorPickers from './components/ColorPickers/ColorPickers';\nimport { Graph } from './Graph';\n\nimport './index.css';\n\nconst SIZE = 12;\nconst COLORS = ['blue','red','green','yellow','orange'];\n\nclass BoardGame extends Component {\n  constructor(props) {\n    super(props);\n    this.incrementCount = this.incrementCount.bind(this);\n    this.sliderInput = this.sliderInput.bind(this);\n    this.restart = this.restart.bind(this);\n    this.colorFill = this.colorFill.bind(this);\n    this.state = {\n      size: SIZE,\n      graph: new Graph(SIZE),\n      colors: COLORS,\n      count: 0,\n    }\n  }\n\n  incrementCount() {\n    this.setState({\n      count: this.state.count + 1\n    });\n  }\n\n  restart() {\n    this.setState({\n      graph: new Graph(this.state.size),\n      count: 0\n    });\n  }\n\n  sliderInput(value) {\n    this.setState({\n      size: value,\n      graph: this.newGrid(value, this.state.colors),\n      count: 0\n    });\n  }\n\n  colorFill(color) {\n    this.state.graph.colorFill(color);\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <div className=\"header\">\n          <h1>Color Flood</h1>\n          <div className=\"newgame\" onClick={(e) => this.restart()}>New Game</div>\n          <div className=\"count\">Changes <span>{this.state.count}</span></div>\n        </div>\n          <div><ColorPickers colors={this.state.colors} clickHandler={this.colorFill} incrementCount={this.incrementCount}/></div>\n          <h3>Starting in the top left corner click on the circles to fill the grid! Try to get as few changes as possible!</h3>\n  <Grid grid={this.state.graph} colors={this.state.colors} size={this.state.size}/> \n\n      </div> \n\n    );\n  }\n}\n\nexport default BoardGame;\n"]},"metadata":{},"sourceType":"module"}